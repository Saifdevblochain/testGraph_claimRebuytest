// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BlacklistUpdated extends ethereum.Event {
  get params(): BlacklistUpdated__Params {
    return new BlacklistUpdated__Params(this);
  }
}

export class BlacklistUpdated__Params {
  _event: BlacklistUpdated;

  constructor(event: BlacklistUpdated) {
    this._event = event;
  }

  get which(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get accessNow(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class BuyEnableUpdated extends ethereum.Event {
  get params(): BuyEnableUpdated__Params {
    return new BuyEnableUpdated__Params(this);
  }
}

export class BuyEnableUpdated__Params {
  _event: BuyEnableUpdated;

  constructor(event: BuyEnableUpdated) {
    this._event = event;
  }

  get oldAccess(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get newAccess(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ClaimEnableUpdated extends ethereum.Event {
  get params(): ClaimEnableUpdated__Params {
    return new ClaimEnableUpdated__Params(this);
  }
}

export class ClaimEnableUpdated__Params {
  _event: ClaimEnableUpdated;

  constructor(event: ClaimEnableUpdated) {
    this._event = event;
  }

  get oldAccess(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get newAccess(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class ClaimedBatch extends ethereum.Event {
  get params(): ClaimedBatch__Params {
    return new ClaimedBatch__Params(this);
  }
}

export class ClaimedBatch__Params {
  _event: ClaimedBatch;

  constructor(event: ClaimedBatch) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rounds(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DopTokenUpdated extends ethereum.Event {
  get params(): DopTokenUpdated__Params {
    return new DopTokenUpdated__Params(this);
  }
}

export class DopTokenUpdated__Params {
  _event: DopTokenUpdated;

  constructor(event: DopTokenUpdated) {
    this._event = event;
  }

  get oldDopAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDopAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DopWalletUpdated extends ethereum.Event {
  get params(): DopWalletUpdated__Params {
    return new DopWalletUpdated__Params(this);
  }
}

export class DopWalletUpdated__Params {
  _event: DopWalletUpdated;

  constructor(event: DopWalletUpdated) {
    this._event = event;
  }

  get oldAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FundsWalletUpdated extends ethereum.Event {
  get params(): FundsWalletUpdated__Params {
    return new FundsWalletUpdated__Params(this);
  }
}

export class FundsWalletUpdated__Params {
  _event: FundsWalletUpdated;

  constructor(event: FundsWalletUpdated) {
    this._event = event;
  }

  get oldAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InvestedWithClaimAmount extends ethereum.Event {
  get params(): InvestedWithClaimAmount__Params {
    return new InvestedWithClaimAmount__Params(this);
  }
}

export class InvestedWithClaimAmount__Params {
  _event: InvestedWithClaimAmount;

  constructor(event: InvestedWithClaimAmount) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountEth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountUsd(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get round(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get dopPurchased(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class InvestedWithEth extends ethereum.Event {
  get params(): InvestedWithEth__Params {
    return new InvestedWithEth__Params(this);
  }
}

export class InvestedWithEth__Params {
  _event: InvestedWithEth;

  constructor(event: InvestedWithEth) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get code(): string {
    return this._event.parameters[1].value.toString();
  }

  get amountInvestedEth(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get round(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get dopPurchased(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class InvestedWithUSDT extends ethereum.Event {
  get params(): InvestedWithUSDT__Params {
    return new InvestedWithUSDT__Params(this);
  }
}

export class InvestedWithUSDT__Params {
  _event: InvestedWithUSDT;

  constructor(event: InvestedWithUSDT) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get code(): string {
    return this._event.parameters[1].value.toString();
  }

  get amountInUsd(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get round(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get dopPurchased(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoundCreated extends ethereum.Event {
  get params(): RoundCreated__Params {
    return new RoundCreated__Params(this);
  }
}

export class RoundCreated__Params {
  _event: RoundCreated;

  constructor(event: RoundCreated) {
    this._event = event;
  }

  get newRound(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get roundData(): RoundCreatedRoundDataStruct {
    return changetype<RoundCreatedRoundDataStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class RoundCreatedRoundDataStruct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get endTime(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }
}

export class RoundUpdated extends ethereum.Event {
  get params(): RoundUpdated__Params {
    return new RoundUpdated__Params(this);
  }
}

export class RoundUpdated__Params {
  _event: RoundUpdated;

  constructor(event: RoundUpdated) {
    this._event = event;
  }

  get round(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get roundData(): RoundUpdatedRoundDataStruct {
    return changetype<RoundUpdatedRoundDataStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class RoundUpdatedRoundDataStruct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get endTime(): BigInt {
    return this[1].toBigInt();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }
}

export class SignerUpdated extends ethereum.Event {
  get params(): SignerUpdated__Params {
    return new SignerUpdated__Params(this);
  }
}

export class SignerUpdated__Params {
  _event: SignerUpdated;

  constructor(event: SignerUpdated) {
    this._event = event;
  }

  get oldSigner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class rebuyPreSaleDop__roundsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getStartTime(): BigInt {
    return this.value0;
  }

  getEndTime(): BigInt {
    return this.value1;
  }

  getPrice(): BigInt {
    return this.value2;
  }
}

export class rebuyPreSaleDop extends ethereum.SmartContract {
  static bind(address: Address): rebuyPreSaleDop {
    return new rebuyPreSaleDop("rebuyPreSaleDop", address);
  }

  USDT(): Address {
    let result = super.call("USDT", "USDT():(address)", []);

    return result[0].toAddress();
  }

  try_USDT(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDT", "USDT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  blacklistAddress(param0: Address): boolean {
    let result = super.call(
      "blacklistAddress",
      "blacklistAddress(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_blacklistAddress(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "blacklistAddress",
      "blacklistAddress(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  buyEnable(): boolean {
    let result = super.call("buyEnable", "buyEnable():(bool)", []);

    return result[0].toBoolean();
  }

  try_buyEnable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("buyEnable", "buyEnable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimEnable(): boolean {
    let result = super.call("claimEnable", "claimEnable():(bool)", []);

    return result[0].toBoolean();
  }

  try_claimEnable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimEnable", "claimEnable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claims(param0: Address, param1: i32): BigInt {
    let result = super.call("claims", "claims(address,uint8):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
    ]);

    return result[0].toBigInt();
  }

  try_claims(param0: Address, param1: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claims", "claims(address,uint8):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimsContract(): Address {
    let result = super.call("claimsContract", "claimsContract():(address)", []);

    return result[0].toAddress();
  }

  try_claimsContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "claimsContract",
      "claimsContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dopToken(): Address {
    let result = super.call("dopToken", "dopToken():(address)", []);

    return result[0].toAddress();
  }

  try_dopToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("dopToken", "dopToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dopWallet(): Address {
    let result = super.call("dopWallet", "dopWallet():(address)", []);

    return result[0].toAddress();
  }

  try_dopWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("dopWallet", "dopWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundsWallet(): Address {
    let result = super.call("fundsWallet", "fundsWallet():(address)", []);

    return result[0].toAddress();
  }

  try_fundsWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("fundsWallet", "fundsWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLatestPriceEth(): BigInt {
    let result = super.call(
      "getLatestPriceEth",
      "getLatestPriceEth():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLatestPriceEth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestPriceEth",
      "getLatestPriceEth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoundCount(): i32 {
    let result = super.call("getRoundCount", "getRoundCount():(uint8)", []);

    return result[0].toI32();
  }

  try_getRoundCount(): ethereum.CallResult<i32> {
    let result = super.tryCall("getRoundCount", "getRoundCount():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rounds(param0: i32): rebuyPreSaleDop__roundsResult {
    let result = super.call(
      "rounds",
      "rounds(uint8):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return new rebuyPreSaleDop__roundsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_rounds(param0: i32): ethereum.CallResult<rebuyPreSaleDop__roundsResult> {
    let result = super.tryCall(
      "rounds",
      "rounds(uint8):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new rebuyPreSaleDop__roundsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  signerWallet(): Address {
    let result = super.call("signerWallet", "signerWallet():(address)", []);

    return result[0].toAddress();
  }

  try_signerWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("signerWallet", "signerWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get priceFeed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fundsWalletAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get signerAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get dopAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get claimsContractAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get usdt(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get lastRound(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeDopWalletCall extends ethereum.Call {
  get inputs(): ChangeDopWalletCall__Inputs {
    return new ChangeDopWalletCall__Inputs(this);
  }

  get outputs(): ChangeDopWalletCall__Outputs {
    return new ChangeDopWalletCall__Outputs(this);
  }
}

export class ChangeDopWalletCall__Inputs {
  _call: ChangeDopWalletCall;

  constructor(call: ChangeDopWalletCall) {
    this._call = call;
  }

  get newDopWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeDopWalletCall__Outputs {
  _call: ChangeDopWalletCall;

  constructor(call: ChangeDopWalletCall) {
    this._call = call;
  }
}

export class ChangeFundsWalletCall extends ethereum.Call {
  get inputs(): ChangeFundsWalletCall__Inputs {
    return new ChangeFundsWalletCall__Inputs(this);
  }

  get outputs(): ChangeFundsWalletCall__Outputs {
    return new ChangeFundsWalletCall__Outputs(this);
  }
}

export class ChangeFundsWalletCall__Inputs {
  _call: ChangeFundsWalletCall;

  constructor(call: ChangeFundsWalletCall) {
    this._call = call;
  }

  get newFundsWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeFundsWalletCall__Outputs {
  _call: ChangeFundsWalletCall;

  constructor(call: ChangeFundsWalletCall) {
    this._call = call;
  }
}

export class ChangeSignerCall extends ethereum.Call {
  get inputs(): ChangeSignerCall__Inputs {
    return new ChangeSignerCall__Inputs(this);
  }

  get outputs(): ChangeSignerCall__Outputs {
    return new ChangeSignerCall__Outputs(this);
  }
}

export class ChangeSignerCall__Inputs {
  _call: ChangeSignerCall;

  constructor(call: ChangeSignerCall) {
    this._call = call;
  }

  get newSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeSignerCall__Outputs {
  _call: ChangeSignerCall;

  constructor(call: ChangeSignerCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends ethereum.Call {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }

  get round(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class ClaimTokensBatchCall extends ethereum.Call {
  get inputs(): ClaimTokensBatchCall__Inputs {
    return new ClaimTokensBatchCall__Inputs(this);
  }

  get outputs(): ClaimTokensBatchCall__Outputs {
    return new ClaimTokensBatchCall__Outputs(this);
  }
}

export class ClaimTokensBatchCall__Inputs {
  _call: ClaimTokensBatchCall;

  constructor(call: ClaimTokensBatchCall) {
    this._call = call;
  }

  get roundsBatch(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }
}

export class ClaimTokensBatchCall__Outputs {
  _call: ClaimTokensBatchCall;

  constructor(call: ClaimTokensBatchCall) {
    this._call = call;
  }
}

export class CreateNewRoundCall extends ethereum.Call {
  get inputs(): CreateNewRoundCall__Inputs {
    return new CreateNewRoundCall__Inputs(this);
  }

  get outputs(): CreateNewRoundCall__Outputs {
    return new CreateNewRoundCall__Outputs(this);
  }
}

export class CreateNewRoundCall__Inputs {
  _call: CreateNewRoundCall;

  constructor(call: CreateNewRoundCall) {
    this._call = call;
  }

  get startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateNewRoundCall__Outputs {
  _call: CreateNewRoundCall;

  constructor(call: CreateNewRoundCall) {
    this._call = call;
  }
}

export class EnableBuyCall extends ethereum.Call {
  get inputs(): EnableBuyCall__Inputs {
    return new EnableBuyCall__Inputs(this);
  }

  get outputs(): EnableBuyCall__Outputs {
    return new EnableBuyCall__Outputs(this);
  }
}

export class EnableBuyCall__Inputs {
  _call: EnableBuyCall;

  constructor(call: EnableBuyCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class EnableBuyCall__Outputs {
  _call: EnableBuyCall;

  constructor(call: EnableBuyCall) {
    this._call = call;
  }
}

export class EnableClaimCall extends ethereum.Call {
  get inputs(): EnableClaimCall__Inputs {
    return new EnableClaimCall__Inputs(this);
  }

  get outputs(): EnableClaimCall__Outputs {
    return new EnableClaimCall__Outputs(this);
  }
}

export class EnableClaimCall__Inputs {
  _call: EnableClaimCall;

  constructor(call: EnableClaimCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class EnableClaimCall__Outputs {
  _call: EnableClaimCall;

  constructor(call: EnableClaimCall) {
    this._call = call;
  }
}

export class PurchaseWithClaimCall extends ethereum.Call {
  get inputs(): PurchaseWithClaimCall__Inputs {
    return new PurchaseWithClaimCall__Inputs(this);
  }

  get outputs(): PurchaseWithClaimCall__Outputs {
    return new PurchaseWithClaimCall__Outputs(this);
  }
}

export class PurchaseWithClaimCall__Inputs {
  _call: PurchaseWithClaimCall;

  constructor(call: PurchaseWithClaimCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get round(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amountUsd(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PurchaseWithClaimCall__Outputs {
  _call: PurchaseWithClaimCall;

  constructor(call: PurchaseWithClaimCall) {
    this._call = call;
  }
}

export class PurchaseWithEthCall extends ethereum.Call {
  get inputs(): PurchaseWithEthCall__Inputs {
    return new PurchaseWithEthCall__Inputs(this);
  }

  get outputs(): PurchaseWithEthCall__Outputs {
    return new PurchaseWithEthCall__Outputs(this);
  }
}

export class PurchaseWithEthCall__Inputs {
  _call: PurchaseWithEthCall;

  constructor(call: PurchaseWithEthCall) {
    this._call = call;
  }

  get code(): string {
    return this._call.inputValues[0].value.toString();
  }

  get round(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minAmountDop(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PurchaseWithEthCall__Outputs {
  _call: PurchaseWithEthCall;

  constructor(call: PurchaseWithEthCall) {
    this._call = call;
  }
}

export class PurchaseWithUsdtCall extends ethereum.Call {
  get inputs(): PurchaseWithUsdtCall__Inputs {
    return new PurchaseWithUsdtCall__Inputs(this);
  }

  get outputs(): PurchaseWithUsdtCall__Outputs {
    return new PurchaseWithUsdtCall__Outputs(this);
  }
}

export class PurchaseWithUsdtCall__Inputs {
  _call: PurchaseWithUsdtCall;

  constructor(call: PurchaseWithUsdtCall) {
    this._call = call;
  }

  get investment(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get code(): string {
    return this._call.inputValues[1].value.toString();
  }

  get round(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PurchaseWithUsdtCall__Outputs {
  _call: PurchaseWithUsdtCall;

  constructor(call: PurchaseWithUsdtCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBlackListedUserCall extends ethereum.Call {
  get inputs(): UpdateBlackListedUserCall__Inputs {
    return new UpdateBlackListedUserCall__Inputs(this);
  }

  get outputs(): UpdateBlackListedUserCall__Outputs {
    return new UpdateBlackListedUserCall__Outputs(this);
  }
}

export class UpdateBlackListedUserCall__Inputs {
  _call: UpdateBlackListedUserCall;

  constructor(call: UpdateBlackListedUserCall) {
    this._call = call;
  }

  get which(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get access(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateBlackListedUserCall__Outputs {
  _call: UpdateBlackListedUserCall;

  constructor(call: UpdateBlackListedUserCall) {
    this._call = call;
  }
}

export class UpdateDopTokenCall extends ethereum.Call {
  get inputs(): UpdateDopTokenCall__Inputs {
    return new UpdateDopTokenCall__Inputs(this);
  }

  get outputs(): UpdateDopTokenCall__Outputs {
    return new UpdateDopTokenCall__Outputs(this);
  }
}

export class UpdateDopTokenCall__Inputs {
  _call: UpdateDopTokenCall;

  constructor(call: UpdateDopTokenCall) {
    this._call = call;
  }

  get newDopAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDopTokenCall__Outputs {
  _call: UpdateDopTokenCall;

  constructor(call: UpdateDopTokenCall) {
    this._call = call;
  }
}

export class UpdateRoundCall extends ethereum.Call {
  get inputs(): UpdateRoundCall__Inputs {
    return new UpdateRoundCall__Inputs(this);
  }

  get outputs(): UpdateRoundCall__Outputs {
    return new UpdateRoundCall__Outputs(this);
  }
}

export class UpdateRoundCall__Inputs {
  _call: UpdateRoundCall;

  constructor(call: UpdateRoundCall) {
    this._call = call;
  }

  get round(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get startTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateRoundCall__Outputs {
  _call: UpdateRoundCall;

  constructor(call: UpdateRoundCall) {
    this._call = call;
  }
}
